/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <dt-bindings/zmk/mouse.h>
#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>

#define DEFAULT 0
#define SYM     1
#define NAV     2
#define NUM     3
#define WIN     4
#define MSE     5

/ {
    combos {
        compatible = "zmk,combos";

        s1 {
            bindings = <&kp LEFT_PARENTHESIS>;
            key-positions = <3 13>;
            timeout-ms = <20>;
        };

        s2 {
            bindings = <&kp RIGHT_PARENTHESIS>;
            key-positions = <6 16>;
            timeout-ms = <20>;
        };

        s3 {
            bindings = <&kp LEFT_BRACKET>;
            key-positions = <12 2>;
            timeout-ms = <20>;
        };

        s4 {
            bindings = <&kp RIGHT_BRACKET>;
            key-positions = <17 7>;
            timeout-ms = <20>;
        };

        s5 {
            bindings = <&kp LESS_THAN>;
            key-positions = <11 1>;
            timeout-ms = <20>;
        };

        s6 {
            bindings = <&kp GREATER_THAN>;
            key-positions = <18 8>;
            timeout-ms = <20>;
        };

        s7 {
            bindings = <&kp LEFT_BRACE>;
            key-positions = <14 4>;
            timeout-ms = <20>;
        };

        s8 {
            bindings = <&kp RIGHT_BRACE>;
            key-positions = <15 5>;
            timeout-ms = <20>;
        };

        s9 {
            bindings = <&kp SQT>;
            key-positions = <24 14>;
            timeout-ms = <20>;
        };

        s10 {
            bindings = <&kp DOUBLE_QUOTES>;
            key-positions = <25 15>;
            timeout-ms = <20>;
        };

        s11 {
            bindings = <&kp PLUS>;
            key-positions = <23 13>;
            timeout-ms = <20>;
        };

        s12 {
            bindings = <&kp MINUS>;
            key-positions = <26 16>;
            timeout-ms = <20>;
        };

        s13 {
            bindings = <&kp ASTERISK>;
            key-positions = <22 12>;
            timeout-ms = <20>;
        };

        s14 {
            bindings = <&kp PERCENT>;
            key-positions = <27 17>;
            timeout-ms = <20>;
        };

        s15 {
            bindings = <&kp NON_US_BACKSLASH>;
            key-positions = <21 11>;
        };

        s16 {
            bindings = <&kp SLASH>;
            key-positions = <28 18>;
            timeout-ms = <20>;
        };

        Tab {
            bindings = <&kp TAB>;
            key-positions = <22 23>;
            timeout-ms = <20>;
        };

        Enter {
            bindings = <&kp ENTER>;
            key-positions = <27 26>;
            timeout-ms = <20>;
        };

        s17 {
            bindings = <&kp LCTRL>;
            key-positions = <2 1>;
        };

        s18 {
            bindings = <&kp HASH>;
            key-positions = <12 11>;
            timeout-ms = <20>;
        };

        s19 {
            bindings = <&kp DOLLAR>;
            key-positions = <22 21>;
            timeout-ms = <20>;
        };

        s20 {
            bindings = <&kp AMPERSAND>;
            key-positions = <8 7>;
        };

        s21 {
            bindings = <&kp EXCLAMATION>;
            key-positions = <18 17>;
            timeout-ms = <20>;
        };

        s22 {
            bindings = <&kp AT_SIGN>;
            key-positions = <27 28>;
            timeout-ms = <20>;
        };

        s23 {
            bindings = <&kp LEFT_WIN>;
            key-positions = <7 6>;
        };

        Esc {
            bindings = <&kp ESCAPE>;
            key-positions = <3 2>;
            timeout-ms = <20>;
        };

        s25 {
            bindings = <&kp EQUAL>;
            key-positions = <17 16>;
            timeout-ms = <20>;
        };

        DtoG {
            bindings = <&to 2>;
            key-positions = <3 1 2>;
            layers = <0>;
            timeout-ms = <20>;
        };

        GtoD {
            bindings = <&to 0>;
            key-positions = <3 2 1>;
            timeout-ms = <20>;
            layers = <2>;
        };

        Ctrl {
            bindings = <&mo 4>;
            key-positions = <8 7 6>;
        };
    };
};

/ {
    chosen { zmk,matrix_transform = &five_column_transform; };
};

/ {
    keymap {
        compatible = "zmk,keymap";

        Default {
            bindings = <
  &kp Q  &kp W  &kp E      &kp R      &kp T        &kp Y     &kp U  &kp I      &kp O    &kp P
  &kp A  &kp S  &kp D      &kp F      &kp G        &kp H     &kp J  &kp K      &kp L    &kp RET
  &kp Z  &kp X  &kp C      &kp V      &kp B        &kp N     &kp M  &kp COMMA  &kp DOT  &kp SEMI
                &kp LSHFT  &kp SPACE  &kp LCTRL    &kp BSPC  &mo 1  &kp LALT
            >;
        };

        DefaultCtrl {
            bindings = <
  &kp F1  &kp F2  &kp F3  &kp F4    &kp F5     &kp F11  &kp HOME  &kp UP    &kp END    &kp ESC
  &kp F6  &kp F7  &kp F8  &kp F9    &kp F10    &kp F12  &kp LEFT  &kp DOWN  &kp RIGHT  &kp CAPS
  &kp N1  &kp N2  &kp N3  &kp N4    &kp N5     &kp N6   &kp N7    &kp N8    &kp N9     &kp N0
                  &trans  &kp LGUI  &trans     &trans   &none     &trans
            >;
        };

        Game {
            bindings = <
  &kp ESC    &kp Q  &kp W      &kp E  &kp R        &trans  &trans  &trans  &trans  &trans
  &kp TAB    &kp A  &kp S      &kp D  &kp F        &trans  &trans  &trans  &trans  &trans
  &kp LSHFT  &kp Z  &kp X      &kp C  &kp V        &trans  &trans  &trans  &trans  &trans
                    &kp LCTRL  &mo 3  &kp SPACE    &trans  &trans  &trans
            >;
        };

        GameCtrl {
            bindings = <
  &trans  &trans  &trans  &trans  &kp T     &kp Y   &kp U   &kp I      &kp O    &kp P
  &trans  &trans  &trans  &trans  &kp G     &kp H   &kp J   &kp K      &kp L    &trans
  &trans  &trans  &trans  &trans  &kp B     &kp N   &kp M   &kp COMMA  &kp DOT  &trans
                  &trans  &trans  &trans    &trans  &trans  &trans
            >;
        };

        Ctrl {
            bindings = <
  &kp INS       &kp C_BRIGHTNESS_INC  &kp C_VOLUME_UP  &kp C_PREVIOUS  &kp C_SLEEP     &bt BT_CLR  &trans  &trans  &trans  &bt BT_CLR_ALL
  &kp PSCRN     &kp C_BRIGHTNESS_DEC  &kp C_VOL_DN     &kp C_NEXT      &kp C_POWER     &trans      &trans  &trans  &trans  &trans
  &bt BT_SEL 0  &bt BT_SEL 1          &bt BT_SEL 2     &bt BT_SEL 3    &bt BT_SEL 4    &trans      &trans  &trans  &trans  &trans
                                      &trans           &trans          &trans          &trans      &trans  &trans
            >;
        };
    };
};
